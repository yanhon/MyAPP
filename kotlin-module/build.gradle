if (deps.kotlinModuleIsLibarary) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'//可省去频繁找id
apply plugin: 'kotlin-kapt'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.version_code
        versionName build_versions.version_name


        flavorDimensions "versionCode"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        multiDexEnabled true
//        javaCompileOptions {
//            annotationProcessorOptions {
////                includeCompileClasspath true
//                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
//            }
//        }
    }

    dataBinding {
        enabled = true
    }
    // 签名配置
    signingConfigs {
        release {
            try {
                storeFile file("E:/AndroidDemo/MyAPP/app/keystore/appRelease.jks")
                storePassword "123456"
                keyAlias "app"
                keyPassword "123456"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
        debug {
            storeFile file("E:/AndroidDemo/MyAPP/app/keystore/debug.keystore")
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {}
        oline {
            debuggable true
            matchingFallbacks = ['debug', 'qa', 'release']
            signingConfig signingConfigs.debug
        }
    }

    publishNonDefault true

    productFlavors {
        mock {

        }
        prod {
        }
        prod2 {
        }
        productFlavors.all { flavor ->
            if (!deps.kotlinModuleIsLibarary) {
                applicationId "com.hong_world.kotlin_module"
                android.sourceSets {
                    main {
                        manifest.srcFile 'src/main/app/AndroidManifest.xml'
                        java.srcDir 'src/main/app/java/'
                    }
                }
            }
        }
    }

    sourceSets {
        prod2 {
            java.srcDir 'src/prod/java/'//解决在productFlavors中配置将引起资源文件重复问题
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.support.app_compat
    implementation deps.constraint_layout
    testImplementation deps.junit
    testImplementation deps.mockito.all    // Espresso UI Testing
    // Espresso UI Testing
    androidTestImplementation deps.espresso.core
    //androidTestImplementation "com.android.support.test.espresso:espresso-contrib:3.0.1"
    androidTestImplementation deps.espresso.intents
    implementation deps.espresso.idling_resource

//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api project(':common')
    kapt deps.arouter.compiler
    implementation deps.kotlin.stdlib

}


