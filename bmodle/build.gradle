if (deps.BIsLibarary) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}
android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools


    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.version_code
        versionName build_versions.version_name

        flavorDimensions "versionCode"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
//                includeCompileClasspath true
                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
            }
        }
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {}
        debugOline {
            matchingFallbacks = ['debug', 'qa', 'release']
        }
    }

    publishNonDefault true
    productFlavors {
        mock {
            if (!rootProject.ext.BIsLibarary) {
                applicationId "com.hong_world.bmodle"
                android.sourceSets {
                    main {
                        manifest.srcFile 'src/mock/java/AndroidManifest.xml'
                        java.srcDir 'src/mock/java/'
                    }
                }
            }
        }
        prod {
        }
        prod2 {
            android.sourceSets {
                main {
//                    manifest.srcFile 'src/app/AndroidManifest.xml'
                    java.srcDir 'src/prod/java/'
                }
            }
        }
    }
    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true)
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.support.app_compat
    implementation deps.constraint_layout

    testImplementation deps.junit

    testImplementation deps.mockito.all
    // Espresso UI Testing
    androidTestImplementation deps.espresso.core
    //androidTestImplementation "com.android.support.test.espresso:espresso-contrib:3.0.1"
    androidTestImplementation deps.espresso.intents
    implementation deps.espresso.idling_resource

    api project(':common')
    annotationProcessor deps.arouter.compiler


}
